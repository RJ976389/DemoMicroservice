package com.sigma.om.demo.response;

import com.sigma.om.order.impl.xml.OMPOrderSerializer;
import com.sigma.om.order.impl.xml.OssjNamespacePrefixMapper;
import com.sigma.om.sdk.soi.framework.SoiContext;
import com.sigma.om.soi.framework.SOIAdapterUtils;
import com.sigma.om.soi.framework.SOIMapUtilityStore;
import com.sigma.om.soi.framework.SoiConfig;
import com.sigma.om.soi.framework.SoiConstants;
import com.sigma.om.soi.framework.config.OutBoundEndPoint;
import com.sigma.om.soi.framework.config.SoiAdapter;
import com.sigma.om.soi.framework.exception.SoiException;
import com.sigma.om.soi.framework.processors.SoiComponentMapUtility;
import com.sigma.om.soi.interaction.ExternalResponseImpl;
import com.sigma.om.utils.XmlUtil;
import com.sigma.om.utils.exception.cmn.OMRtException;
import com.sigma.som.Order;
import com.sigma.som.OrderChangeNotification;
import com.sigma.som.OrderKey;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.commons.lang3.StringUtils;
import org.ossj.xml.common.v1_5.ManagedEntityKey;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Random;

public class SimulateDemoResponce implements Processor {

    private static com.sigma.som.ObjectFactory somObjectFactory = new com.sigma.som.ObjectFactory();

    private static final Logger LOGGER = LoggerFactory
            .getLogger(SimulateDemoResponce.class.getName());

    @Override
    public void process(final Exchange exchange) throws Exception {

        final SoiContext soiContext = SoiConfig.getSoIContextFromInBody(exchange);
        // get Outbound to check stubMode for Adapter
        final OutBoundEndPoint outBoundEndPoint = getGenericOutBoundEndpoint(exchange, soiContext);
        final String stub = outBoundEndPoint.getStub();
        LOGGER.info(" Generic adapter stub value: {} ", stub);
        // process reply based on response
        processReply(soiContext, stub, exchange);

    }
    private static void processReply(final SoiContext soiContext, final String stub, final Exchange exchange)
            throws Exception {
        final ExternalResponseImpl soiExtResponse = new ExternalResponseImpl();
        String ossJResponse = null;
        if (SoiConstants.MANUAL.equalsIgnoreCase(stub)) {
            final String soiOrderId = getGeneratorId();
            final String ossJRequest = soiContext.getSoiExternalInteraction().get(0).getRequest();
            ossJResponse = produceOSSJResponse(ossJRequest, soiOrderId);

        } else if (SoiConstants.SUCCESS.equalsIgnoreCase(stub)) {
            LOGGER.info(" Demo adapter running in success Mode");
            LOGGER.info("externalInteraction", soiContext.getSoiExternalInteraction());
            final String ossJRequest = soiContext.getSoiExternalInteraction().get(0).getRequest();
            ossJResponse = OSSJXMLRequestToResponse.produceAutoGeneratedOSSJResponse(ossJRequest, false,
                    SoiConstants.SUCCESS);

        } else if (SoiConstants.FAILURE.equalsIgnoreCase(stub)) {
            LOGGER.info(" Demo adapter running in failure Mode");
            final String ossJRequest = soiContext.getSoiExternalInteraction().get(0).getRequest();
            LOGGER.info("ossJRequest" + ossJRequest);
            ossJResponse = OSSJXMLRequestToResponse.produceAutoGeneratedOSSJResponse(ossJRequest, false,
                    SoiConstants.FAILURE);
        } else {
            LOGGER.info(" Generic adapter running in actual Mode");
            throw new SoiException("Bad code flow!!!");
        }

        soiExtResponse.setExtInteractionId(soiContext.getSoiExternalInteraction().get(0).getId());
        soiExtResponse.setResponse(ossJResponse);
        soiContext.getSoiExternalInteraction().get(0).addResponse(soiExtResponse);
        // only print the xml if debug is enabled.
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(" Response {} ", soiExtResponse.toString());
        }

        LOGGER.info("Response has been generated");
        exchange.getIn().setBody(soiContext);
    }

    private static OutBoundEndPoint getGenericOutBoundEndpoint(final Exchange exchange,
                                                               final SoiContext soiContext) {

        final SoiAdapter soiAdapter = SOIAdapterUtils.getSoiAdapter(exchange);
        final SoiComponentMapUtility soiComponentMapUtility = SOIMapUtilityStore
                .getSoiAdapterUtilityMap(soiAdapter);
        final OutBoundEndPoint outBoundEndPoint;
        if (soiContext.getSoiRequestList().get(0).isStopFlag()) {
            outBoundEndPoint = soiComponentMapUtility.getOutBoundWithFlowNameAndChangeType(
                    soiContext.getSoiRequestList().get(0).getSOIOperationRef(),
                    SoiConstants.INTERACTION_TYPE_STOP);
        } else {
            outBoundEndPoint = soiComponentMapUtility.getOutBoundWithFlowNameAndChangeType(
                    soiContext.getSoiRequestList().get(0).getSOIOperationRef(),
                    soiContext.getSoiRequestList().get(0).getInteractionType().toString());
        }
        return outBoundEndPoint;
    }

    public static String produceOSSJResponse(final String ossjRequest, final String soiOrderId)
            throws Exception {
        String ossJResponse = StringUtils.EMPTY;
        final Order orderChangeResponse = (Order) XmlUtil.getInstance().toObject(ossjRequest,
                com.sigma.som.Order.class);
        ossJResponse = serialize(orderChangeResponse, soiOrderId);
        // only print the xml if debug is enabled.
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(" Sync ossJResponse {} ", ossJResponse);
        }

        LOGGER.info("sync response has been generated");
        return ossJResponse;
    }

    public static String serialize(Order order, String soiOrderId) {
        try {
            return XmlUtil.getInstance().getXML(getChangeNotification(order, soiOrderId),
                    com.sigma.som.OrderChangeNotification.class, new OssjNamespacePrefixMapper());
        } catch (Exception e) {
            throw new OMRtException("Failed to convert pendig job", e);
        }
    }

    public static OrderChangeNotification getChangeNotification(Order order, String soiOrderId) {
        OrderChangeNotification xOrderNotif = new OrderChangeNotification();
        xOrderNotif.setOrderKey(getOrderKey(order, soiOrderId));

        return xOrderNotif;
    }

    public static OrderKey getOrderKey(Order order, String soiOrderId) {
        final OrderKey xOrderKey = somObjectFactory.createOrderKey();
        ManagedEntityKey.PrimaryKey primaryKey = getPrimaryKey(soiOrderId);
        xOrderKey.setPrimaryKey(primaryKey);
        xOrderKey.setExternalKey(order.getOrderKey().getExternalKey());
        xOrderKey.setType("SOI_ORDER");
        return xOrderKey;
    }

    public static ManagedEntityKey.PrimaryKey getPrimaryKey(String id) {
        return OMPOrderSerializer.getPrimaryKey(id);
    }

    private static String getGeneratorId() {
        Random r = new Random(System.currentTimeMillis());
        return String.valueOf((10000 + r.nextInt(20000)));
    }
}
