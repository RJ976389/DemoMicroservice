package com.sigma.om.demo.response;

import com.sigma.om.order.impl.xml.OMPOrderSerializer;
import com.sigma.om.order.impl.xml.OssjNamespacePrefixMapper;
import com.sigma.om.soi.framework.SoiConstants;
import com.sigma.om.utils.CommonUtils;
import com.sigma.om.utils.XmlUtil;
import com.sigma.om.utils.exception.cmn.OMRtException;
import com.sigma.som.*;
import org.apache.commons.lang3.StringUtils;
import org.ossj.xml.common.v1_5.ManagedEntityKey.PrimaryKey;
import org.ossj.xml.common_cbecore.v1_5.CharacteristicValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Random;

/**
 * @author AritraD
 *
 */
public class OSSJXMLRequestToResponse {
    private static final Logger                LOGGER                       = LoggerFactory
            .getLogger(OSSJXMLRequestToResponse.class);
    private static ObjectFactory somObjectFactory             = null;
    public static final String                 $ORDER_REASON_CODE           = "${order_reason_code}";
    public static final String                 $ORDER_REASON_NOTE           = "${order_reason_note}";
    public static final String                 $ORDER_STATUS                = "${order_status}";
    public static final String                 $ITEM_STATUS                 = "${item_status}";
    public static final String                 $ITEM_REASON_NOTE            = "${item_reason_note}";
    public static final String                 $ITEM_REASON_CODE            = "${item_reason_code}";
    public static final String                 $COMPLETION_CODE             = "${completion_code}";
    static {
        init();
    }

    public static String produceOSSJResponse(String ossjRequest, boolean isWithChars) throws Exception {
        String ossJResponse = StringUtils.EMPTY;
        final Order orderChangeResponse = (Order) XmlUtil.getInstance().toObject(ossjRequest,
                Order.class);
        ossJResponse = serialize(orderChangeResponse, isWithChars, null);
        // print only in debug level
        LOGGER.debug(" ossJResponse {} ", ossJResponse);
        LOGGER.info("ossJResponse generated");
        return ossJResponse;
    }

    public static void init() {
        somObjectFactory = new ObjectFactory();
    }

    public static String produceAutoGeneratedOSSJResponse(String ossjRequest, boolean isWithChars,
            String status) throws Exception {
        String ossJResponse = StringUtils.EMPTY;
        final Order orderChangeResponse = (Order) XmlUtil.getInstance().toObject(ossjRequest,
                Order.class);
        ossJResponse = serialize(orderChangeResponse, isWithChars, status);
        // print only in debug level
        LOGGER.debug(" ossJResponse {} ", ossJResponse);
        LOGGER.info("ossJResponse generated");

        return ossJResponse;
    }

    public static String serialize(Order order, boolean isWithChars, String status) {
        try {
            return XmlUtil.getInstance().getXML(getChangeNotification(order, isWithChars, status),
                    OrderChangeNotification.class, new OssjNamespacePrefixMapper());
        } catch (Exception e) {
            throw new OMRtException("Failed to convert pendig job", e);
        }
    }

    public static OrderChangeNotification getChangeNotification(Order order, boolean isWithChars,
            String status) {
        OrderChangeNotification xOrderNotif = new OrderChangeNotification();
        xOrderNotif.setOrderKey(getOrderKey(order));
        String orderStatus = $ORDER_STATUS;
        String orderReasonNote = $ORDER_REASON_NOTE;
        String orderReasonCode = $ORDER_REASON_CODE;

        if (SoiConstants.SUCCESS.equalsIgnoreCase(status)) {
            orderStatus = "order.completed";
            orderReasonNote = "Order is successful....";
            orderReasonCode = SoiConstants.SUCCESS_CODE;
        } else if (SoiConstants.FAILURE.equalsIgnoreCase(status)) {
            orderStatus = "closed.aborted";
            orderReasonNote = "Order is NOT successful....";
            orderReasonCode = SoiConstants.ERROR_CODE;
        }

        xOrderNotif.setStatus(orderStatus);
        xOrderNotif.setReasonNote(orderReasonNote);
        xOrderNotif.setReasonCode(orderReasonCode);
        xOrderNotif.setCompletionCode($COMPLETION_CODE);
        OrderItemChangeNotification xItem = new OrderItemChangeNotification();
        List<OrderItem> orderItemList = order.getOrderItem();
        if (!CommonUtils.isEmpty(orderItemList)) {
            for (OrderItem item : order.getOrderItem()) {
                OItemType oItemType = somObjectFactory.createOItemType();
                oItemType.setOrderItemKey(createOrderItemKey("", item.getOrderItemKey().getExternalKey()));
                oItemType.setEntityKey(createEntityKey(item));
                String itemStatus = $ITEM_STATUS;
                String itemReasonNote = $ITEM_REASON_NOTE;
                String itemReasonCode = $ITEM_REASON_CODE;

                if (SoiConstants.SUCCESS.equalsIgnoreCase(status)) {
                    itemStatus = "item.completed";
                    itemReasonNote = "Order Item is successful....";
                    itemReasonCode = SoiConstants.SUCCESS_CODE;
                } else if (SoiConstants.FAILURE.equalsIgnoreCase(status)) {
                    itemStatus = "closed.aborted";
                    itemReasonNote = "Order Item is NOT successful....";
                    itemReasonCode = SoiConstants.ERROR_CODE;
                }

                oItemType.setStatus(itemStatus);
                oItemType.setReasonNote(itemReasonNote);
                oItemType.setReasonCode((itemReasonCode));
                final EntityLinks entityLinks = item.getEntity().getEntityLinks();
                final EntityLinkChangeNotification entityLinkChangeNotification = somObjectFactory
                        .createEntityLinkChangeNotification();
                entityLinkChangeNotification.getEntityLink().addAll(entityLinks.getEntityLink());
                oItemType.setEntityLinkChangeNotification(entityLinkChangeNotification);
                CharacteristicChangeNotification entityChars = somObjectFactory
                        .createCharacteristicChangeNotification();
                if (isWithChars) {
                    if (item.getEntity().getDescribedBy() != null) {
                        for (CharacteristicValue charValue : item.getEntity().getDescribedBy().getValue()
                                .getItem()) {
                            String charName = charValue.getCharacteristic().getValue();
                            LOGGER.info(" charName {} ", charName);
                            Item charItem = somObjectFactory.createItem();
                            com.sigma.som.CharacteristicValue charValue1 = somObjectFactory
                                    .createCharacteristicValue();
                            charValue1.setValueDetail("$entity_char_value");
                            charItem.getValue().add(charValue1);
                            charItem.setCharacteristic(charName);
                            entityChars.getItem().add(charItem);
                            CharacteristicChangeNotification charChangeNotif = somObjectFactory
                                    .createCharacteristicChangeNotification();
                            charChangeNotif.getItem().add(charItem);
                            oItemType.setEntityCharacteristicChangeNotification(charChangeNotif);
                        }
                    }
                }
                xItem.getOItem().add(oItemType);
            }
        }
        xOrderNotif.setOrderItemChangeNotification(xItem);

        return xOrderNotif;
    }

    private static EntityKey createEntityKey(final OrderItem item) {
        final EntityKey xEntityKey = somObjectFactory.createEntityKey();
        PrimaryKey primaryKey =item.getEntity().getEntityKey().getPrimaryKey();
        xEntityKey.setPrimaryKey(primaryKey);
        xEntityKey.setType(item.getEntity().getEntityKey().getType());
        return xEntityKey;
    }

    public static OrderKey getOrderKey(Order order) {
        final OrderKey xOrderKey = somObjectFactory.createOrderKey();
        PrimaryKey primaryKey = getPrimaryKey(getGeneratorId());
        xOrderKey.setPrimaryKey(primaryKey);
        xOrderKey.setExternalKey(order.getOrderKey().getExternalKey());
        xOrderKey.setType("SOI_ORDER");
        return xOrderKey;
    }

    public static PrimaryKey getPrimaryKey(String id) {
        return OMPOrderSerializer.getPrimaryKey(id);
    }

    public static OrderItemKey createOrderItemKey(final String type, final String externalItemId) {
        final OrderItemKey xOrderItemKey = somObjectFactory.createOrderItemKey();
        PrimaryKey primaryKey = getPrimaryKey(getGeneratorId());
        xOrderItemKey.setPrimaryKey(primaryKey);
        xOrderItemKey.setExternalKey(externalItemId);
        xOrderItemKey.setType(type);
        return xOrderItemKey;
    }

    private static String getGeneratorId() {
        Random r = new Random(System.currentTimeMillis());
        return String.valueOf((10000 + r.nextInt(20000)));
    }
}
